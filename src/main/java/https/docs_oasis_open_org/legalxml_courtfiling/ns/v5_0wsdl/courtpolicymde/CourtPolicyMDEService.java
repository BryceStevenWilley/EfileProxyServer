package https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0wsdl.courtpolicymde;

import java.net.URL;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;

import javax.xml.namespace.QName;

import org.apache.cxf.headers.Header;

import edu.suffolk.litlab.efspserver.SoapX509CallbackHandler;
import edu.suffolk.litlab.efspserver.services.ServiceHelpers;
import edu.suffolk.litlab.efspserver.tyler.TylerUrls;
import edu.suffolk.litlab.efspserver.tyler.TylerUserNamePassword;
import edu.suffolk.litlab.efspserver.ecf5.Ecf5Helper;

import java.util.Map;
import java.util.Optional;
import java.util.List;
import tyler.efm.services.EfmUserService;
import tyler.efm.services.IEfmUserService;
import tyler.efm.services.schema.authenticaterequest.AuthenticateRequestType;
import tyler.efm.services.schema.authenticateresponse.AuthenticateResponseType;
import tyler.efm.services.schema.getuserrequest.GetUserRequestType;
import jakarta.xml.ws.BindingProvider;

import gov.niem.release.niem.domains.jxdm._6.CourtType;
import gov.niem.release.niem.niem_core._4.IdentificationType;
import gov.niem.release.niem.niem_core._4.TextType;
import gov.niem.release.niem.proxy.xsd._4.AnyURI;
import https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0.policyrequest.GetPolicyRequestMessageType;
import https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0.policyrequest.PolicyQueryCriteriaType;
import https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0.policyresponse.DevelopmentPolicyType;
import https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0.policyresponse.RuntimePolicyType;
import https.docs_oasis_open_org.legalxml_courtfiling.ns.v5_0.wrappers.GetPolicyRequestType;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.1
 * 2023-05-19T16:20:02.536-04:00
 * Generated source version: 4.0.1
 *
 */
@WebServiceClient(name = "CourtPolicyMDEService",
                  wsdlLocation = "classpath:wsdl/stage/illinois-ecf5-CourtPolicyMDEService.wsdl",
                  targetNamespace = "https://docs.oasis-open.org/legalxml-courtfiling/ns/v5.0WSDL/CourtPolicyMDE")
public class CourtPolicyMDEService extends Service {

    public final static QName SERVICE = new QName("https://docs.oasis-open.org/legalxml-courtfiling/ns/v5.0WSDL/CourtPolicyMDE", "CourtPolicyMDEService");
    public final static QName CourtPolicyMDE = new QName("https://docs.oasis-open.org/legalxml-courtfiling/ns/v5.0WSDL/CourtPolicyMDE", "CourtPolicyMDE");

    public CourtPolicyMDEService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CourtPolicyMDEService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CourtPolicyMDEService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CourtPolicyMDEService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns CourtPolicyMDE
     */
    @WebEndpoint(name = "CourtPolicyMDE")
    public CourtPolicyMDE getCourtPolicyMDE() {
        return super.getPort(CourtPolicyMDE, CourtPolicyMDE.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CourtPolicyMDE
     */
    @WebEndpoint(name = "CourtPolicyMDE")
    public CourtPolicyMDE getCourtPolicyMDE(WebServiceFeature... features) {
        return super.getPort(CourtPolicyMDE, CourtPolicyMDE.class, features);
    }

    public static void main(String[] args) {
      System.out.println("Go!");
    SoapX509CallbackHandler.setX509Password(System.getenv("X509_PASSWORD"));

    AuthenticateRequestType authReq = new AuthenticateRequestType();
    authReq.setEmail("bwilley@suffolk.edu");
    authReq.setPassword("MM&mr1874");
    Optional<EfmUserService> userServiceFactory = TylerUrls.getEfmUserFactory("illinois", "stage");
    IEfmUserService port = userServiceFactory.get().getBasicHttpBindingIEfmUserService();
    ServiceHelpers.setupServicePort((BindingProvider) port);
    IEfmUserService userPort = port;
    AuthenticateResponseType authRes = userPort.authenticateUser(authReq);
    if (!authRes.getError().getErrorCode().equals("0")) {
      System.out.println(
          "Got Tyler error when authing: "
              + authRes.getError().getErrorCode()
              + ", "
              + authRes.getError().getErrorText());
      return;
    } 
    Map<String, Object> ctx = ((BindingProvider) userPort).getRequestContext();
    List<Header> headerList = TylerUserNamePassword.makeHeaderList(authRes);
    ctx.put(Header.HEADER_LIST, headerList);
    GetUserRequestType gurt = new GetUserRequestType();
    gurt.setUserID(authRes.getUserID());
    System.out.println(userPort.getUser(gurt));
      CourtPolicyMDEService serv = new CourtPolicyMDEService(CourtPolicyMDEService.class.getClassLoader().getResource("wsdl/stage/illinois-ecf5-CourtPolicyMDEService.wsdl"));
      CourtPolicyMDE mde = serv.getCourtPolicyMDE();
    ctx = ((BindingProvider) mde).getRequestContext();
    ctx.put(Header.HEADER_LIST, headerList);
    ServiceHelpers.setupServicePort((BindingProvider) mde);
      GetPolicyRequestType body = new GetPolicyRequestType();
      GetPolicyRequestMessageType msg = new GetPolicyRequestMessageType();
      gov.niem.release.niem.proxy.xsd._4.ObjectFactory niemProxyObjFac = new gov.niem.release.niem.proxy.xsd._4.ObjectFactory();
      gov.niem.release.niem.niem_core._4.ObjectFactory niemCoreObjFac = new gov.niem.release.niem.niem_core._4.ObjectFactory();
      gov.niem.release.niem.domains.jxdm._6.ObjectFactory jxObjFac = new gov.niem.release.niem.domains.jxdm._6.ObjectFactory();
      CourtType court = jxObjFac.createCourtType();
      gov.niem.release.niem.niem_core._4.IdentificationType id = niemCoreObjFac.createIdentificationType();
      gov.niem.release.niem.proxy.xsd._4.String outStr = niemProxyObjFac.createString();
      outStr.setValue("adams");
      id.setIdentificationID(outStr);
      court.setOrganizationIdentification(id);
      var did = new IdentificationType();
      did.setIdentificationID(Ecf5Helper.convertString("1"));
      did.setIdentificationSourceText(Ecf5Helper.convertText("FilingAssembly"));
      did.setIdentificationCategoryDescriptionText(Ecf5Helper.convertText("messageID"));
      msg.getDocumentIdentification().add(did);
      msg.setCaseCourt(court);
      msg.getGetPolicyRequestMessageAugmentationPoint();
      msg.setSendingMDELocationID(Ecf5Helper.convertId("https://efile.suffolklitlab.org"));
      msg.setServiceInteractionProfileCode(Ecf5Helper.convertNormalizedString("urn:oasis:names:tc:legalxml-courtfiling:schema:xsd:WebServicesMessaging-5.0"));
      msg.setDocumentPostDate(Ecf5Helper.convertDate(LocalDate.ofInstant(Instant.now(), ZoneId.systemDefault())));
      PolicyQueryCriteriaType pqct = new PolicyQueryCriteriaType();
      msg.setPolicyQueryCriteria(pqct);
      body.setGetPolicyRequestMessage(msg);
      var resp = mde.getPolicy(body);
      for (var obj : resp.getGetPolicyResponseMessage().getRest()) {
        if (obj.getValue() instanceof DevelopmentPolicyType devPolicy) {
          System.out.println("Dev policy");
          System.out.print(devPolicy);
        } else if (obj.getValue() instanceof RuntimePolicyType runPolicy) {
          System.out.println("Run policy");
          for (var cle : runPolicy.getCodeListExtension()) {
            System.out.println(cle.getECFElementNameText().getValue() + ": " + cle.getExtensionCanonicalURI().getValue() + ", " + cle.getExtensionCanonicalVersionURI().getValue() + ": " + cle.getExtensionLocationURI().getValue());
          }
          //System.out.println(runPolicy);
          runPolicy.getUri();
        }
      }
      System.out.println(mde.getPolicy(body));
    }

    public String valIfNull(TextType other) {
      if (other != null) {
        return other.getValue();
      } else {
        return "";
      }
    }

    public String valIfNull(AnyURI other) {
      return (other != null) ? other.getValue() : "";
    }
  }